<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 继承父项目 -->
    <parent>
        <artifactId>stock_parent</artifactId>
        <groupId>com.itheima.stock</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <artifactId>stock_common</artifactId>
    <description>common工程仅维护公共代码</description>

    <!-- 项目构建属性配置 -->
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <dependencies>
        <!--
            Lombok 是一个用于简化 Java 开发的工具，通过注解生成 getter/setter、构造函数等代码。
            可以减少样板代码，提高代码的可读性和可维护性。
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>

        <!--
            Jackson-annotations 是 Jackson 框架的一部分，用于处理 JSON 数据的序列化和反序列化。
            它允许你使用注解自定义 JSON 数据的格式，适合用于 API 和数据交互场景。
        -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.11.0</version>
        </dependency>

        <!--
            MyBatis 是一个支持 SQL 映射的持久化框架，MyBatis-Spring-Boot-Starter 提供与 Spring Boot 集成的依赖。
            它用于将 SQL 映射到 Java 对象，简化数据库操作。
        -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!--
            Gson 是 Google 提供的一个 Java 库，用于将 Java 对象转换为 JSON 格式，或将 JSON 字符串反序列化为 Java 对象。
            常用于数据交换和 API 开发中。
        -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.6</version>
        </dependency>

        <!--
            Joda-Time 是一个用于替代 Java 标准日期时间库的工具包，提供更简洁和强大的日期时间操作功能。
            在复杂的时间计算和转换场景中非常有用。
        -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.10.6</version>
        </dependency>

        <!--
            Guava 是 Google 提供的一个 Java 核心库，包含集合、缓存、并发库、字符串处理等工具类。
            提供了许多简化 Java 开发的便捷功能。
        -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.2-jre</version>
        </dependency>

        <!--
            PageHelper 是 MyBatis 的分页插件，PageHelper-Spring-Boot-Starter 是其与 Spring Boot 的集成模块。
            用于简化分页查询的开发，尤其是在大数据集的查询中非常有用。
        -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.13</version>
        </dependency>

        <!--
            Druid 是阿里巴巴开源的数据库连接池和监控组件，Druid-Spring-Boot-Starter 是其与 Spring Boot 的集成模块。
            提供了强大的监控、SQL 性能分析、连接池管理等功能。
        -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.23</version>
        </dependency>

        <!--
            Commons-Lang3 是 Apache Commons 项目中的一个工具库，提供了对 Java 核心类（如 String、Date、Collection 等）的扩展功能。
            它为常见操作（如字符串处理、数字处理等）提供了简化的 API。
        -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.10</version>
        </dependency>

        <!--
            MySQL Connector-J 是 MySQL 官方提供的用于连接 MySQL 数据库的 Java 驱动程序。
            它允许 Java 应用程序通过 JDBC 与 MySQL 交互。
        -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.22</version>
        </dependency>

        <!--
            Spring-Boot-Configuration-Processor 是 Spring Boot 提供的一个工具，用于在开发时生成自动配置提示和文档。
            它可以帮助开发者更好地理解和使用自定义的配置属性。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <version>2.3.4.RELEASE</version>
        </dependency>
        <!--引入swagger依赖-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>3.0.0</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>io.springfox</groupId>-->
<!--            <artifactId>springfox-swagger-ui</artifactId>-->
<!--            <version>3.0.0</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
        <!--knife4j的依赖-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
            <version>3.0.3</version>
        </dependency>
        <!--支持接口参数校验处理-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
    </dependencies>

</project>
